// Code generated by bitproto. DO NOT EDIT.

#ifndef __BITPROTO__MESSAGING_H__
#define __BITPROTO__MESSAGING_H__ 1

#include <inttypes.h>
#include <stddef.h>
#include <stdint.h>
#ifndef __cplusplus
#include <stdbool.h>
#endif

#include "bitproto.h"

#if defined(__cplusplus)
extern "C" {
#endif

typedef uint8_t MessageId; // 8bit

// send public Key Exchange, rsp: InitializeCommRsp
#define INITIALIZE_COMM 0
// sends random 16 bytes as an challange, rsp: ChallangeRsp
#define CHALLANGE 1
// Finish Handshake sending true/false, rsp: HandshakeFinishedRsp
#define HANDSHAKE_FINISHED 2
// Start the proper App
#define START_APP 4

// Number of bytes to encode struct InitializeComm
#define BYTES_LENGTH_INITIALIZE_COMM 32

struct InitializeComm {
    uint8_t public_key[32]; // 256bit
};

// Number of bytes to encode struct InitializeCommRsp
#define BYTES_LENGTH_INITIALIZE_COMM_RSP 32

struct InitializeCommRsp {
    uint8_t public_key[32]; // 256bit
};

// Number of bytes to encode struct Challange
#define BYTES_LENGTH_CHALLANGE 32

struct Challange {
    uint8_t challange_buffer[32]; // 256bit
};

// Number of bytes to encode struct ChallangeRsp
#define BYTES_LENGTH_CHALLANGE_RSP 60

struct ChallangeRsp {
    uint8_t challange_buffer[32]; // 256bit
    uint8_t initialization_vector[12]; // 96bit
    uint8_t tag[16]; // 128bit
};

// Number of bytes to encode struct HandshakeFinished
#define BYTES_LENGTH_HANDSHAKE_FINISHED 1

struct HandshakeFinished {
    bool ack; // 1bit
};

// Number of bytes to encode struct HandshakeFinishedRsp
#define BYTES_LENGTH_HANDSHAKE_FINISHED_RSP 1

struct HandshakeFinishedRsp {
    bool ack; // 1bit
};

// Number of bytes to encode struct Messages
#define BYTES_LENGTH_MESSAGES 66

struct Messages {
    MessageId id; // 8bit
    struct InitializeComm init_comm; // 256bit
    struct Challange challange; // 256bit
    struct HandshakeFinished handshake_finished; // 1bit
    bool start_app; // 1bit
};

// Number of bytes to encode struct Responses
#define BYTES_LENGTH_RESPONSES 94

struct Responses {
    MessageId id; // 8bit
    struct InitializeCommRsp init_comm; // 256bit
    struct ChallangeRsp challange; // 480bit
    struct HandshakeFinishedRsp handshake_finished; // 1bit
};

typedef uint8_t AppNode; // 8bit

// Add password
#define ADD_ENTRY 0
// Get password
#define READ_ENTRY 1
// Modify password
#define MODIFY 2
// generate password
#define GENERATE 3
// Read all entries
#define READ_ALL 4

// Number of bytes to encode struct Login
#define BYTES_LENGTH_LOGIN 48

struct Login {
    uint8_t username[16]; // 128bit
    uint8_t password_hash[32]; // 256bit
};

// Number of bytes to encode struct LoginRsp
#define BYTES_LENGTH_LOGIN_RSP 1

struct LoginRsp {
    bool success; // 1bit
};

// Number of bytes to encode struct Generate
#define BYTES_LENGTH_GENERATE 1

struct Generate {
    bool generate; // 1bit
};

// Number of bytes to encode struct GenerateRsp
#define BYTES_LENGTH_GENERATE_RSP 32

struct GenerateRsp {
    uint8_t generated_password[32]; // 256bit
};

// Number of bytes to encode struct ReadEntry
#define BYTES_LENGTH_READ_ENTRY 1

struct ReadEntry {
    uint8_t index; // 8bit
};

// Number of bytes to encode struct ReadEntryRsp
#define BYTES_LENGTH_READ_ENTRY_RSP 65

struct ReadEntryRsp {
    uint8_t info[32]; // 256bit
    uint8_t wrapped_password[32]; // 256bit
    uint8_t password_length; // 8bit
};

// Number of bytes to encode struct AddEntry
#define BYTES_LENGTH_ADD_ENTRY 65

struct AddEntry {
    uint8_t info[32]; // 256bit
    uint8_t wrapped_password[32]; // 256bit
    uint8_t password_length; // 8bit
};

// Number of bytes to encode struct AddEntryRsp
#define BYTES_LENGTH_ADD_ENTRY_RSP 1

struct AddEntryRsp {
    bool ack; // 1bit
};

// Number of bytes to encode struct App
#define BYTES_LENGTH_APP 67

struct App {
    AppNode node_id; // 8bit
    struct AddEntry new_entry; // 520bit
    struct Generate generate; // 1bit
};

// Number of bytes to encode struct AppRsp
#define BYTES_LENGTH_APP_RSP 34

struct AppRsp {
    AppNode node_id; // 8bit
    struct AddEntryRsp new_entry; // 1bit
    struct GenerateRsp generate; // 256bit
};

// Encode struct InitializeComm to given buffer s.
int EncodeInitializeComm(struct InitializeComm *m, unsigned char *s);
// Decode struct InitializeComm from given buffer s.
int DecodeInitializeComm(struct InitializeComm *m, unsigned char *s);
// Format struct InitializeComm to a json format string.
int JsonInitializeComm(struct InitializeComm *m, char *s);

// Encode struct InitializeCommRsp to given buffer s.
int EncodeInitializeCommRsp(struct InitializeCommRsp *m, unsigned char *s);
// Decode struct InitializeCommRsp from given buffer s.
int DecodeInitializeCommRsp(struct InitializeCommRsp *m, unsigned char *s);
// Format struct InitializeCommRsp to a json format string.
int JsonInitializeCommRsp(struct InitializeCommRsp *m, char *s);

// Encode struct Challange to given buffer s.
int EncodeChallange(struct Challange *m, unsigned char *s);
// Decode struct Challange from given buffer s.
int DecodeChallange(struct Challange *m, unsigned char *s);
// Format struct Challange to a json format string.
int JsonChallange(struct Challange *m, char *s);

// Encode struct ChallangeRsp to given buffer s.
int EncodeChallangeRsp(struct ChallangeRsp *m, unsigned char *s);
// Decode struct ChallangeRsp from given buffer s.
int DecodeChallangeRsp(struct ChallangeRsp *m, unsigned char *s);
// Format struct ChallangeRsp to a json format string.
int JsonChallangeRsp(struct ChallangeRsp *m, char *s);

// Encode struct HandshakeFinished to given buffer s.
int EncodeHandshakeFinished(struct HandshakeFinished *m, unsigned char *s);
// Decode struct HandshakeFinished from given buffer s.
int DecodeHandshakeFinished(struct HandshakeFinished *m, unsigned char *s);
// Format struct HandshakeFinished to a json format string.
int JsonHandshakeFinished(struct HandshakeFinished *m, char *s);

// Encode struct HandshakeFinishedRsp to given buffer s.
int EncodeHandshakeFinishedRsp(struct HandshakeFinishedRsp *m, unsigned char *s);
// Decode struct HandshakeFinishedRsp from given buffer s.
int DecodeHandshakeFinishedRsp(struct HandshakeFinishedRsp *m, unsigned char *s);
// Format struct HandshakeFinishedRsp to a json format string.
int JsonHandshakeFinishedRsp(struct HandshakeFinishedRsp *m, char *s);

// Encode struct Messages to given buffer s.
int EncodeMessages(struct Messages *m, unsigned char *s);
// Decode struct Messages from given buffer s.
int DecodeMessages(struct Messages *m, unsigned char *s);
// Format struct Messages to a json format string.
int JsonMessages(struct Messages *m, char *s);

// Encode struct Responses to given buffer s.
int EncodeResponses(struct Responses *m, unsigned char *s);
// Decode struct Responses from given buffer s.
int DecodeResponses(struct Responses *m, unsigned char *s);
// Format struct Responses to a json format string.
int JsonResponses(struct Responses *m, char *s);

// Encode struct Login to given buffer s.
int EncodeLogin(struct Login *m, unsigned char *s);
// Decode struct Login from given buffer s.
int DecodeLogin(struct Login *m, unsigned char *s);
// Format struct Login to a json format string.
int JsonLogin(struct Login *m, char *s);

// Encode struct LoginRsp to given buffer s.
int EncodeLoginRsp(struct LoginRsp *m, unsigned char *s);
// Decode struct LoginRsp from given buffer s.
int DecodeLoginRsp(struct LoginRsp *m, unsigned char *s);
// Format struct LoginRsp to a json format string.
int JsonLoginRsp(struct LoginRsp *m, char *s);

// Encode struct Generate to given buffer s.
int EncodeGenerate(struct Generate *m, unsigned char *s);
// Decode struct Generate from given buffer s.
int DecodeGenerate(struct Generate *m, unsigned char *s);
// Format struct Generate to a json format string.
int JsonGenerate(struct Generate *m, char *s);

// Encode struct GenerateRsp to given buffer s.
int EncodeGenerateRsp(struct GenerateRsp *m, unsigned char *s);
// Decode struct GenerateRsp from given buffer s.
int DecodeGenerateRsp(struct GenerateRsp *m, unsigned char *s);
// Format struct GenerateRsp to a json format string.
int JsonGenerateRsp(struct GenerateRsp *m, char *s);

// Encode struct ReadEntry to given buffer s.
int EncodeReadEntry(struct ReadEntry *m, unsigned char *s);
// Decode struct ReadEntry from given buffer s.
int DecodeReadEntry(struct ReadEntry *m, unsigned char *s);
// Format struct ReadEntry to a json format string.
int JsonReadEntry(struct ReadEntry *m, char *s);

// Encode struct ReadEntryRsp to given buffer s.
int EncodeReadEntryRsp(struct ReadEntryRsp *m, unsigned char *s);
// Decode struct ReadEntryRsp from given buffer s.
int DecodeReadEntryRsp(struct ReadEntryRsp *m, unsigned char *s);
// Format struct ReadEntryRsp to a json format string.
int JsonReadEntryRsp(struct ReadEntryRsp *m, char *s);

// Encode struct AddEntry to given buffer s.
int EncodeAddEntry(struct AddEntry *m, unsigned char *s);
// Decode struct AddEntry from given buffer s.
int DecodeAddEntry(struct AddEntry *m, unsigned char *s);
// Format struct AddEntry to a json format string.
int JsonAddEntry(struct AddEntry *m, char *s);

// Encode struct AddEntryRsp to given buffer s.
int EncodeAddEntryRsp(struct AddEntryRsp *m, unsigned char *s);
// Decode struct AddEntryRsp from given buffer s.
int DecodeAddEntryRsp(struct AddEntryRsp *m, unsigned char *s);
// Format struct AddEntryRsp to a json format string.
int JsonAddEntryRsp(struct AddEntryRsp *m, char *s);

// Encode struct App to given buffer s.
int EncodeApp(struct App *m, unsigned char *s);
// Decode struct App from given buffer s.
int DecodeApp(struct App *m, unsigned char *s);
// Format struct App to a json format string.
int JsonApp(struct App *m, char *s);

// Encode struct AppRsp to given buffer s.
int EncodeAppRsp(struct AppRsp *m, unsigned char *s);
// Decode struct AppRsp from given buffer s.
int DecodeAppRsp(struct AppRsp *m, unsigned char *s);
// Format struct AppRsp to a json format string.
int JsonAppRsp(struct AppRsp *m, char *s);

void BpXXXProcessInitializeComm(void *data, struct BpProcessorContext *ctx);
void BpXXXJsonFormatInitializeComm(void *data, struct BpJsonFormatContext *ctx);

void BpXXXProcessInitializeCommRsp(void *data, struct BpProcessorContext *ctx);
void BpXXXJsonFormatInitializeCommRsp(void *data, struct BpJsonFormatContext *ctx);

void BpXXXProcessChallange(void *data, struct BpProcessorContext *ctx);
void BpXXXJsonFormatChallange(void *data, struct BpJsonFormatContext *ctx);

void BpXXXProcessChallangeRsp(void *data, struct BpProcessorContext *ctx);
void BpXXXJsonFormatChallangeRsp(void *data, struct BpJsonFormatContext *ctx);

void BpXXXProcessHandshakeFinished(void *data, struct BpProcessorContext *ctx);
void BpXXXJsonFormatHandshakeFinished(void *data, struct BpJsonFormatContext *ctx);

void BpXXXProcessHandshakeFinishedRsp(void *data, struct BpProcessorContext *ctx);
void BpXXXJsonFormatHandshakeFinishedRsp(void *data, struct BpJsonFormatContext *ctx);

void BpXXXProcessMessages(void *data, struct BpProcessorContext *ctx);
void BpXXXJsonFormatMessages(void *data, struct BpJsonFormatContext *ctx);

void BpXXXProcessResponses(void *data, struct BpProcessorContext *ctx);
void BpXXXJsonFormatResponses(void *data, struct BpJsonFormatContext *ctx);

void BpXXXProcessLogin(void *data, struct BpProcessorContext *ctx);
void BpXXXJsonFormatLogin(void *data, struct BpJsonFormatContext *ctx);

void BpXXXProcessLoginRsp(void *data, struct BpProcessorContext *ctx);
void BpXXXJsonFormatLoginRsp(void *data, struct BpJsonFormatContext *ctx);

void BpXXXProcessGenerate(void *data, struct BpProcessorContext *ctx);
void BpXXXJsonFormatGenerate(void *data, struct BpJsonFormatContext *ctx);

void BpXXXProcessGenerateRsp(void *data, struct BpProcessorContext *ctx);
void BpXXXJsonFormatGenerateRsp(void *data, struct BpJsonFormatContext *ctx);

void BpXXXProcessReadEntry(void *data, struct BpProcessorContext *ctx);
void BpXXXJsonFormatReadEntry(void *data, struct BpJsonFormatContext *ctx);

void BpXXXProcessReadEntryRsp(void *data, struct BpProcessorContext *ctx);
void BpXXXJsonFormatReadEntryRsp(void *data, struct BpJsonFormatContext *ctx);

void BpXXXProcessAddEntry(void *data, struct BpProcessorContext *ctx);
void BpXXXJsonFormatAddEntry(void *data, struct BpJsonFormatContext *ctx);

void BpXXXProcessAddEntryRsp(void *data, struct BpProcessorContext *ctx);
void BpXXXJsonFormatAddEntryRsp(void *data, struct BpJsonFormatContext *ctx);

void BpXXXProcessApp(void *data, struct BpProcessorContext *ctx);
void BpXXXJsonFormatApp(void *data, struct BpJsonFormatContext *ctx);

void BpXXXProcessAppRsp(void *data, struct BpProcessorContext *ctx);
void BpXXXJsonFormatAppRsp(void *data, struct BpJsonFormatContext *ctx);

#if defined(__cplusplus)
}
#endif

#endif